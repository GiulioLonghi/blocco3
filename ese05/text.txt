Esercizi Blocco 3
Luca Oliveri
luca.olivieri-1@unitn.it
Universit√† di Trento  November 19, 2020
Introduzione
Focus principale su manipolazione di stringhe. Usare quando possibile le funzioni della cstring e ctype.
Essendo che alcuni di questi esercizi richiedono di essere risolti dividendo il problema principale in pi√π
problemi semplici e puntuali, dedicare tempo ad organizzare il codice in modo adeguato.
3.1
SUP che prende una stringa del tipo "923D" ed estrae il numero, convertendolo in int. La lettera D √®
sempre alla ne della stringa. Vericare il funzionamento anche con numeri negativi. Esistono diversi
modi per fare questa conversione, ma probabilmente la soluzione pi√π semplice √® usare il metodo nativo
C++, che √® la prima soluzione proposta dal sito.
3.2
SUP che prende una stringa dall'utente che pu√≤ essere anche una frase, comprensiva quindi di spazi e
punteggiatura. Il programma ristampa la stessa stringa al contrario.
3.3
Localizzare in una stringa tutte le occorrenze di un determinato carattere. Le stringhe in ingresso sono
composte di sole lettere minuscole e spazi. Il programma stampa la stessa stringa in ingresso con le
occorrenze trovate convertite a lettere maiuscole. Stampa inoltre un conteggio delle occorrenze.
Info: Ci sono diverse funzioni di libreria che possono essere utili in questo esercizio. Consultare
l'elenco completo e scegliere quella ritenuta pi√π adatta.
i
3.4
SUP esegue parsing di stringa e svolge una funzionalit√† programmabile. Nello specico il programma
prende in input una stringa di valori di temperatura del tipo "20C@34F@12F@23C" e converte questi in
gradi Kelvin. Stampare due tabelle distinte per conversioni Celsius e Fahrenheit.
Info: Come nell'esercizio precedente, diverse funzioni di libreria possono aiutare a dividere la stringa
in pi√π parti. In questo la scelta pi√π adatta √® strtok.
i
1
3.5
SUP che data una stringa in input calcola le occorrenze di ogni carattere. Risolvere il problema usando un
unico array per contare le occorrenze. Stampare il risultato in tabella, con possibili interessanti statistiche
a vostra discrezione. Considerare solo lettere dell'alfabeto, maiuscole e minuscole fanno parte dello stesso
conteggio. Scartare tutto ci√≤ che non √® una lettera, per semplicit√† si scartano anche i caratteri della
tabella ASCII estesa come le lettere accentate.
Info: Tenere a mente come sono rappresentate le lettere nella tabella ASCII. √à possibile indicizzare
l'array dove incrementiamo mano a mano il conteggio usando direttamente la lettera sotto esame e
applicando un oset. Ad esempio la lettera D, quarta nell'alfabeto quindi avente indice 3, ha valore
ASCII 44, oppure anche 64 nel nostro caso. Sottraendo un oset di 41 o di 61 rispettivamente,
troviamo il nostro indice di valore 3.
i
Estensione avanzata: Invece che prendere in input una stringa dell'utente, prendere in input
il nome di un le di testo plain-text, in altre parole un le .txt. √à possibile trovare online interi
testi in formato .txt, come ad esempio I Promessi Sposi, oppure anche La Divina Commedia. La
manipolazione di le in C++ usa lo stesso paradigma di uso della console. Trovate qui quello che vi
serve specicatamente per risolvere questo esercizio, in particolare basatevi sull'esempio.
!
3.6
SUP che simula il comportamento di due dadi. I dadi possono avere numero di facce variabile, ma per
vericare la correttezza del programma cominciare con dadi a sei facce. Il programma 'tira' i due dadi
usando la funzione rand, opportunamente inizializzata. La somma dei valori di ogni lancio √® salvata in
array. Il programma deve lanciare i dadi decine di migliaia di volte, numero specicato dall'utente, e
stampare la probabilit√† di ogni valore sotto forma di tabella. Vericare che somma 7 √® la pi√π probabile
con probabilit√† di un sesto, essendo che ci sono 6 lanci diversi che restituiscono somma 7. Indagare poi
con dadi aventi numero di facce diverse da sei.
Info: Il programma pu√≤ simulare qualsiasi tipo di dado, ma in realt√† solo alcuni poligono possono
richiudersi in un solido. Qua una lista dei possibili dadi, dai pi√π classici ai pi√π esoterici.
i
Esercizi CodeStepByStep
‚Ä¢ isPermutation
‚Ä¢ longestUniqueString
‚Ä¢ compressString
2